<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"

       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- spring MVC 核心配置文件
            1.处理器映射器
            2.处理器配置器
            3.视图解析器

         -->


    <!-- 处理映射器 -->
    <!-- 1.根据bean的name进行查找Handler 将action的url配置在bean的name中 -->
    <!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />  -->

    <!-- 2.简单url映射 -->
    <!--    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">-->
    <!--        <property name="mappings">-->
    <!--            <props>-->
    <!--                &lt;!&ndash; /demo1.action /demo2.action  都可以访问到指定的hanler1 &ndash;&gt;-->
    <!--                <prop key="/demo1.action">userhandler1</prop>-->
    <!--                <prop key="/demo2.action">userhandler1</prop>-->
    <!--                <prop key="/demo3.action">userhandler2</prop>-->
    <!--                <prop key="/demo4.action">userhandler2</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--    </bean>-->


    <!-- 处理适配器 -->
    <!-- 1.处理器适配器 配置SimpleControllerHandlerAdapter ，要求handler必须实现Controller接口 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />	 -->


    <!-- 2.处理器适配器 配置HttpRequestHandlerAdapter ，要求handler必须实现HttpRequestHandler接口 -->
    <!--    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>-->


    <!--    &lt;!&ndash; 视图解析器 &ndash;&gt;-->
    <!-- ViewResolver -->
    <!--    <bean-->
    <!--            class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--        <property name="viewClass"-->
    <!--                  value="org.springframework.web.servlet.view.JstlView" />-->

    <!--        &lt;!&ndash; 前缀：/WEB-INF/jsp/ 后缀：.jsp /WEB-INF/jsp/list.jsp &ndash;&gt;-->
    <!--        <property name="prefix" value="/WEB-INF/jsp/" />-->
    <!--        <property name="suffix" value=".jsp" />-->
    <!--    </bean>-->

    <!-- 配置bean -->

    <!--    <bean  name="/demo1.action" id="userhandler1" class="com.baidu.handler.UserHandler1"></bean>-->

    <!--    <bean  id="userhandler2" class="com.baidu.handler.UserHandler2"></bean>-->
    <!--spring mvc id 是对应的访问路径 class访问对应的实体类-->

    <context:component-scan base-package="com.qfedu.controller,com.qfedu.common"></context:component-scan>


    <!--    日期格式转换驱动-->
    <mvc:annotation-driven conversion-service="converterService" validator="validator">
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>

        <!-- 前缀：/WEB-INF/jsp/ 后缀：.jsp /WEB-INF/jsp/list.jsp -->
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <!--    设置自定义转换器类-->
    <bean id="converterService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.qfedu.convert.CustomerDateConvert"></bean>
            </list>
        </property>
    </bean>

    <!--    配置资源文件-->
    <bean id="hibernateMessages" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="basenames">
            <list>
                <value>ValidationMessages</value>
            </list>
        </property>
    </bean>
    <!--配置验证器-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
        <property name="validationMessageSource" ref="hibernateMessages"></property>
    </bean>

    <!--如果直接在控制器的方法上面直接使用验证注解，必须加下面的配置-->
    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"></bean>

    <!--他会将静态资源扔给web服务器，默认的servlet Tomcat下面的servlet    -->

    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设定默认编码 -->
        <!--        <property name="defaultEncoding" value="UTF-8"></property>-->
        <!-- 设定文件上传的最大值为5MB，5*1024*1024 -->
        <property name="maxUploadSize" value="5242880"></property>
        <!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 -->
        <!--        <property name="maxInMemorySize" value="40960"></property>-->
        <!-- 上传文件的临时路径 -->
        <!--        <property name="uploadTempDir" value="fileUpload/temp"></property>-->
        <!-- 延迟文件解析 -->
        <!--        <property name="resolveLazily" value="true"/>-->
    </bean>
    <!--   配置拦截器-->

    <mvc:interceptors>
        <!--        <mvc:interceptor>-->
        <!--            &lt;!&ndash;            配置哪些资源需要被拦截&ndash;&gt;-->
        <!--            &lt;!&ndash;            任意路径下面后缀是.do的资源&ndash;&gt;-->
        <!--            <mvc:mapping path="/**/*.do"/>-->
        <!--            &lt;!&ndash;            自定义的拦截器&ndash;&gt;-->
        <!--            <bean class="com.qfedu.interceptor.TimeInterceptor"></bean>-->
        <!--        </mvc:interceptor>-->
        <mvc:interceptor>
            <!--            拦截所有资源-->
            <mvc:mapping path="/**"/>

            <!--            排除js文件夹-->
            <mvc:exclude-mapping path="/js/**"/>
            <!--            排除login.html,login.do-->
            <mvc:exclude-mapping path="/**/login.*"/>
            <bean class="com.qfedu.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--    include-filter设置扫描哪些注解-->
    <!--    exclude-filter 设置不扫描哪些注解-->
    <!--    <context:component-scan base-package="com.qfedu">-->
    <!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>-->
    <!--    </context:component-scan>-->
</beans>